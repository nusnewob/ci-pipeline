apiVersion: v1
kind: Template
metadata:
  name: oc-pipeline
labels:
  application: oc-pipeline
parameters:
  - name: APP_ID
    description: Application
    displayName: Application
    required: true
  - name: NAMESPACE
    description: Namespace
    displayName: Namespace
    required: true
  - name: SCM
    description: SCM
    displayName: SCM
    required: true
  - name: SCM_COMMIT
    description: SCM Commit
    displayName: SCM Commit
    required: true
    value: master
  - name: APP_PORT
    description: Port
    displayName: Port
    required: true
    value: '8080'
  - name: DOMAIN
    description: Cluster Domain
    displayName: Cluster Domain
    required: true
  - name: BUILDER
    description: Application Builder Image
    displayName: Application Builder Image
    required: true
    value: 'cf-builder:latest'
  - name: APP_REPLICA
    description: Number of app instances
    displayName: Number of app instances
    required: true
    value: '1'
  - name: GIT_SSH_KEY
    description: GIT SSH private key
    displayName: GIT SSH private key
    required: true
    value: null
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      generation: 1
      labels:
        app: ${APP_ID}
        namespace: ${NAMESPACE}
      name: ${APP_ID}
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${APP_ID}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APP_ID}
            deploymentconfig: ${APP_ID}
        spec:
          containers:
          - imagePullPolicy: Always
            name: ${APP_ID}
            ports:
            - containerPort: 8080
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${APP_ID}
          from:
            kind: ImageStreamTag
            name: ${APP_ID}:latest
            namespace: compute
        type: ImageChange
      - type: ConfigChange
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: ${APP_ID}
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_ID}
    spec:
      triggers:
        - type: ImageChange
          imageChange:
            lastTriggeredImageID: docker-registry.default.svc:5000/tools/${BUILDER}
        - type: ConfigChange
      runPolicy: Serial
      source:
        type: Git
        git:
          uri: '${SCM}'
          ref: ${SCM_COMMIT}
        sourceSecret:
          name: ${APP_ID}
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            namespace: tools
            name: '${BUILDER}'
      output:
        to:
          kind: ImageStreamTag
          name: '${APP_ID}:latest'
      resources: {}
      postCommit: {}
      nodeSelector: null
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: ${APP_ID}
      namespace: ${NAMESPACE}
    spec: {}
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APP_ID}
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_ID}
    spec:
      ports:
        - name: ${APP_ID}-${APP_PORT}-tcp
          protocol: TCP
          port: ${{APP_PORT}}
          targetPort: ${{APP_PORT}}
      selector:
        deploymentconfig: ${APP_ID}
      type: ClusterIP
      sessionAffinity: None
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APP_ID}
      namespace: ${NAMESPACE}
      labels:
        app: ${APP_ID}
    spec:
      host: ${APP_ID}.${DOMAIN}
      to:
        kind: Service
        name: ${APP_ID}
        weight: 100
      port:
        targetPort: ${APP_ID}-${APP_PORT}-tcp
      tls:
        termination: edge
      wildcardPolicy: None
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${APP_ID}
      namespace: ${NAMESPACE}
    data:
      ssh-privatekey: ${GIT_SSH_KEY}
    type: kubernetes.io/ssh-auth
